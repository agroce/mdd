Say I’ve got a list of directories. I want to find the smallest subset of that list that would contain all of the directories in that list. So “A/B”, “A/B/C”, “A/C/A”, “A/C/B” would yield “A/B”, “A/C/A”, “A/C/B” please implement this functionality in Python, and do it in strict TDD style, finding minimal steps towards the specification, writing tests that fail for these, then implementing the functionality, then writing a new failing test, until the full functionality is completely implemented. that is, do strict TDD implementation of the above specification, and show all work, all tests, all incremental stages of development. please explain your work and comment on your decisions to break down the spec. Make sure you show 1) each "red light" test that indicates the current partial specification 2) each incremental version of the code as TDD proceeds 3) the final version where tests embody the full specification and the code is complete.

OPTIONAL:

In addition to normal TDD, perform the following step: after each red light test implementation followed by green light code implementation, examine the program mutants of the green-light implementation and implement any additional tests needed to ensure that 100% of non-equivalent mutants are detected. Perform this after each step, and as usual in TDD, keep those tests around too. Report the final implementation and full test suite, including mutation-guided steps
